#Использовать asserts
#Использовать logos

Перем Лог;
Перем ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек;

#Область ПрограммныйИнтерфейс

// Возвращает приоритет провайдера
//
//  Возвращаемое значение:
//   Число - текущий приоритет провайдера
//
Функция Приоритет() Экспорт
	Возврат 1;
КонецФункции

// Возвращает идентификатор провайдера
//
//  Возвращаемое значение:
//   Строка - текущий идентификатор провайдера
//
Функция Идентификатор() Экспорт
	Возврат "json";
КонецФункции

// Возвращает тип провайдера
//
//  Возвращаемое значение:
//   Строка - текущий тип провайдера
//
Функция ТипПровайдера() Экспорт
	Возврат "file";
КонецФункции

// Возвращает расширения файлов по умолчанию
//
//  Возвращаемое значение:
//   Строка - расширения файлов по умолчанию (yaml yml)
//
Функция РасширенияФайлов() Экспорт
	Возврат "json";
КонецФункции

// Выполняет чтение параметров для провайдера
//
// Параметры:
//   НастройкиПровайдера - Структура - структура настроек провайдера
//
//  Возвращаемое значение:
//   Соответствие - результат чтения провайдера
//
Функция ПрочитатьПараметры(НастройкиПровайдера) Экспорт

	ПрочитанныеПараметры = Новый Соответствие;

	ФайлПараметров = Новый Файл(НастройкиПровайдера.ФайлПараметров);

	Если Не ФайлПараметров.Существует() Тогда
		Лог.Отладка("Не найден файл параметров <%1>", ФайлПараметров.ПолноеИмя);
		Возврат ПрочитанныеПараметры;
	КонецЕсли;

	Лог.Отладка("Выполняю чтение файла параметров <%1>", ФайлПараметров.ПолноеИмя);
	ПрочитанныеПараметры = Прочитать(ФайлПараметров.ПолноеИмя);

	Возврат ПрочитанныеПараметры;

КонецФункции

#КонецОбласти

// Выполнить чтение настроек из файла
//
// Параметры:
//   ПутьКФайлуНастройки - Cтрока - путь к файлу настроек
// Возвращаемое значение:
//   Соответствие - итоговые параметры
//
Функция Прочитать(Знач ПутьКФайлуНастройки)

	НастройкиИзФайла = Новый Соответствие;

	Попытка

		Лог.Отладка("ПутьКФайлуНастройки <%1>", ПутьКФайлуНастройки);

		НастройкиИзФайла = ПрочитатьНастройкиИзПараметраФайл(ПутьКФайлуНастройки);

		Лог.Отладка("Итоговые параметры:");
		ПоказатьПараметрыВРежимеОтладки(НастройкиИзФайла);

	Исключение

		Лог.Ошибка("Ошибка чтения настроек
		|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение;

	КонецПопытки;

	Возврат НастройкиИзФайла;

КонецФункции // Прочитать

Функция ПрочитатьНастройкиИзПараметраФайл(ПутьКФайлуНастройки)

	ФайлНастроек = Новый Файл(ПутьКФайлуНастройки);

	НастройкиИзФайла = ПрочитатьФайлJSON(ФайлНастроек.ПолноеИмя);

	Возврат НастройкиИзФайла;

КонецФункции // ПрочитатьНастройкиИзПараметраФайл()

Функция ПрочитатьФайлJSON(Знач ИмяФайла)
	Перем Параметры;

	Лог.Отладка("Путь файла настроек <%1>", ИмяФайла);

	СообщениеОшибки = СтрШаблон("Файл настроек не существует. Путь <%1>", ИмяФайла);
	JsonСтрока  = ПрочитатьФайл(ИмяФайла, СообщениеОшибки);

	Лог.Отладка("Текст файла настроек:
	|%1", JsonСтрока);

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(JsonСтрока);
	Параметры = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();

	Возврат Параметры;
КонецФункции

Функция ПрочитатьФайл(Знач ИмяФайла, Знач СообщениеОшибки)
	ФайлСуществующий = Новый Файл(ИмяФайла);
	Если Не ФайлСуществующий.Существует() Тогда
		ВызватьИсключение СообщениеОшибки;
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Рез  = Чтение.Прочитать();
	Чтение.Закрыть();
	Возврат Рез;
КонецФункции // ПрочитатьФайл()

Процедура ПоказатьПараметрыВРежимеОтладки(ЗначенияПараметров)

	ПроцессорВывода = Новый ВыводВРежимеОтладки(Лог);
	ПроцессорВывода.ПоказатьНастройкиВРежимеОтладки(ЗначенияПараметров);

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.configor.json");
