#Использовать fluent
#Использовать notify

Перем ПутьКФайлуПараметров; // Строка
Перем КаталогиПоиска; // Массив
Перем РасширенияФайлаПараметров; // Массив
Перем НаименованияФайлаПараметров; // Массив
Перем КлассПровайдера; // Объект

Перем ИндексКаталоговПоиска; // Соответствие
Перем НастройкиПровайдера; // Структура

Перем РезультатЧтения; // Соответствие

Перем НаправлениеСортировки; // Строка
Перем ЧитатьТолькоОдинФайл; // Булево

Перем ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек; // Строка, По умолчанию 

Перем Лог;

#Область Интерфейс_провайдера_параметров

// Возвращает тип провайдера
//
//  Возвращаемое значение:
//   Строка - текущий тип провайдера
//
Функция ТипПровайдера() Экспорт

	Возврат КлассПровайдера.ТипПровайдера();

КонецФункции

// Возвращает идентификатор провайдера
//
//  Возвращаемое значение:
//   Строка - текущий идентификатор провайдера
//
Функция Идентификатор() Экспорт

	Возврат КлассПровайдера.Идентификатор();

КонецФункции

// Возвращает приоритет провайдера
//
//  Возвращаемое значение:
//   Число - текущий приоритет провайдера
//
Функция Приоритет() Экспорт

	Возврат КлассПровайдера.Приоритет();

КонецФункции

// Выполняет чтение параметров для провайдера
//
// Параметры:
//   ВходящиеНастройкиПровайдера - Структура - структура настроек провайдера
//
//  Возвращаемое значение:
//   Соответствие - результат чтения провайдера
//
Функция ПрочитатьПараметры(Знач ВходящиеНастройкиПровайдера) Экспорт

	ПрочитатьНастройки(ВходящиеНастройкиПровайдера);

	НастройкиПровайдера = ВходящиеНастройкиПровайдера;

	Возврат ПрочитатьПараметрыПоНастройкам();

КонецФункции

// Выполняет запись данных провайдера
//
// Параметры:
//   НастройкиПровайдера - Структура - структура настроек провайдера
//
Процедура ЗаписатьПараметры(Знач НастройкиПровайдера) Экспорт

	КлассПровайдера.ЗаписатьПараметры(НастройкиПровайдера);

КонецПроцедуры

#КонецОбласти

#Область Дополнительные_экспортные_процедуры

// Добавляет дополнительное расширение файла параметров
//
// Параметры:
//   ВходящиеРасширениеФайлов - Строка - дополнительное расширение файла параметров
//
Процедура ДобавитьРасширениеФайла(Знач ВходящиеРасширениеФайлов) Экспорт
	РасширенияФайлаПараметров.Добавить(ВходящиеРасширениеФайлов);
КонецПроцедуры

// Добавляет дополнительное наименование файла параметров
//
// Параметры:
//   ВходящееНаименованиеФайла - Строка - Наименование файла параметров
//
Процедура ДобавитьНаименованиеФайла(Знач ВходящееНаименованиеФайла) Экспорт
	НаименованияФайлаПараметров.Добавить(ВходящееНаименованиеФайла);
КонецПроцедуры

// Возвращает массив расширений файлов для провайдера
//
//  Возвращаемое значение:
//   Массив - строка расширений
//
Функция РасширенияФайлов() Экспорт
	Возврат РасширенияФайлаПараметров;
КонецФункции

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Процедура УстановитьНаправлениеСортировки(ВходящееНаправлениеСортировки)

	Если НЕ НаправлениеСортировкиКорректное(ВходящееНаправлениеСортировки) Тогда
		ВызватьИсключение СтрШаблон("Переданная <%1> сортировка не корректная", ВходящееНаправлениеСортировки);
	КонецЕсли;

	НаправлениеСортировки = ВходящееНаправлениеСортировки;

КонецПроцедуры

Функция НаправлениеСортировкиКорректное(ТекстНаправлениеСортировки)

	Возврат ВРег(ТекстНаправлениеСортировки) = ВРег("ВОЗР")
			ИЛИ ВРег(ТекстНаправлениеСортировки) = ВРег("УБЫВ")
			;

КонецФункции

Процедура ДобавитьКаталогПоискаВИндекс(КаталогПоиска, Приоритет, НаименованиеФайла, РасширениеФайла)

	ИндексКаталоговПоиска.Добавить(Новый КаталогПоискаФайла(КаталогПоиска, НаименованиеФайла, РасширениеФайла, Приоритет));

КонецПроцедуры

Функция ПрочитатьПараметрыПоНастройкам()

	РезультатЧтения = Новый Соответствие;

	Если ЗначениеЗаполнено(ПутьКФайлуПараметров) Тогда

		ФайлПараметров = Новый Файл(ПутьКФайлуПараметров);
		НачальныйСимвол = 2;
		РасширениеФайла = Сред(ФайлПараметров.Расширение, НачальныйСимвол);

		РасширениеНайдено = РасширенияФайлаПараметров.Найти(НРег(РасширениеФайла));

		Если РасширениеНайдено = Неопределено Тогда
			Возврат РезультатЧтения;
		КонецЕсли;

		ВыполнитьЧтениеФайловогоПровайдера(ПутьКФайлуПараметров);
	Иначе
		ВыполнитьПоискИЧтениеФайловПараметров();
	КонецЕсли;
	
	Возврат РезультатЧтения;

КонецФункции

Процедура ВыполнитьПоискИЧтениеФайловПараметров()

	ИндексКаталоговПоиска = Новый Массив;

	СформироватьИндексКаталогПоиска();

	КоллекцияФайловПараметров = Новый ПроцессорКоллекций;
	КоллекцияФайловПараметров.УстановитьКоллекцию(ИндексКаталоговПоиска);

	КоличествоФайлов = КоллекцияФайловПараметров
			.Сортировать("(Первый, Второй) -> {
				|	Если ВРЕГ(НаправлениеСортировки) = ВРег(""УБЫВ"") Тогда
				|		Возврат ПроцессорыКоллекций.СтандартнаяФункцияСравненияОбратныйПорядок()
				|			.Выполнить(Первый.Приоритет(), Второй.Приоритет());
				|	Иначе
				|		Возврат ПроцессорыКоллекций.СтандартнаяФункцияСравненияПрямойПорядок()
				|			.Выполнить(Первый.Приоритет(), Второй.Приоритет());
				|	КонецЕсли;
				|}",
				ЭтотОбъект)
			.Фильтровать("Элемент -> Элемент.ПоискФайла()")
			.Количество();

	Если КоличествоФайлов = 0 Тогда
		
		Возврат;

	ИначеЕсли ЧитатьТолькоОдинФайл
		ИЛИ КоличествоФайлов = 1 Тогда

		КаталогПоискаФайла = КоллекцияФайловПараметров.ПолучитьПервый();
		ВыполнитьЧтениеФайловогоПровайдера(КаталогПоискаФайла.ИмяФайла());

	Иначе
	
		КоллекцияФайловПараметров.ДляКаждого(
			"КаталогПоиска -> ВыполнитьЧтениеФайловогоПровайдера(КаталогПоиска.ИмяФайла());",
			ЭтотОбъект
		);

	КонецЕсли;

	ОбработатьШаблонныеПодстановки(РезультатЧтения);
	
КонецПроцедуры

Процедура СформироватьИндексКаталогПоиска()

	Для ИИ = 0 По КаталогиПоиска.ВГраница() Цикл

		Для каждого РасширениеФайла Из РасширенияФайлаПараметров Цикл

			Для каждого НаименованиеФайла Из НаименованияФайлаПараметров Цикл

				ДобавитьКаталогПоискаВИндекс(КаталогиПоиска[ИИ], ИИ, НаименованиеФайла, РасширениеФайла);

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Процедура ВыполнитьЧтениеФайловогоПровайдера(Знач ИмяФайлаПараметров) Экспорт

	РезультатЧтенияФайла = ВыполнитьЧтениеПровайдера(ИмяФайлаПараметров);

	ОбработатьПараметрыРекурсивно(РезультатЧтенияФайла, ИмяФайлаПараметров);

	ОбъединитьРезультаты(РезультатЧтения, РезультатЧтенияФайла);

КонецПроцедуры

Функция ВыполнитьЧтениеПровайдера(Знач ИмяФайлаПараметров)
	
	НастройкаПровайдераДляТекущегоЧтения = СкопироватьСтруктуру(НастройкиПровайдера);
	НастройкаПровайдераДляТекущегоЧтения.Вставить("ФайлПараметров", ИмяФайлаПараметров);

	РезультатЧтенияФайла = КлассПровайдера.ПрочитатьПараметры(НастройкаПровайдераДляТекущегоЧтения);

	Возврат РезультатЧтенияФайла;

КонецФункции

Процедура ОбъединитьРезультаты(ОсновноеСоответствие, ДобавляемоеСоответствие)

	Для каждого Элемент Из ДобавляемоеСоответствие Цикл
		ОсновноеСоответствие.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;

КонецПроцедуры

Функция СкопироватьМассив(ВходящийМассив)

	НовыйМассив = Новый Массив;

	Для каждого Элемент Из ВходящийМассив Цикл
		НовыйМассив.Добавить(Элемент);
	КонецЦикла;

	Возврат НовыйМассив;

КонецФункции

Функция СкопироватьСтруктуру(ВходящаяСтруктура)
	НоваяСтруктура = Новый Структура;

	Для каждого КлючЗначение Из ВходящаяСтруктура Цикл
		НоваяСтруктура.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;

	Возврат НоваяСтруктура;
КонецФункции

Процедура ПрочитатьНастройки(Знач НастройкиПровайдера)

	Если НастройкиПровайдера.Свойство("РасширенияФайлаПараметров")
		И НастройкиПровайдера.РасширенияФайлаПараметров.Количество() > 0 Тогда
		РасширенияФайлаПараметров = НастройкиПровайдера.РасширенияФайлаПараметров;
	КонецЕсли;

	Если НастройкиПровайдера.Свойство("НаименованияФайлаПараметров") Тогда
		НаименованияФайлаПараметров = НастройкиПровайдера.НаименованияФайлаПараметров;
	КонецЕсли;

	Если ЗначениеЗаполнено(НастройкиПровайдера.ПутьКФайлуПараметров) Тогда
		ПутьКФайлуПараметров = НастройкиПровайдера.ПутьКФайлуПараметров;
	КонецЕсли;

	ЧитатьТолькоОдинФайл = НастройкиПровайдера.ЧитатьТолькоОдинФайл;

	ДополнительныеКаталогиПоиска = НастройкиПровайдера.КаталогиПоиска;
	КаталогиПоиска = СкопироватьМассив(ДополнительныеКаталогиПоиска);

	ВложенныйКаталог = НастройкиПровайдера.ВложенныйКаталог;
		
	Если ЗначениеЗаполнено(ВложенныйКаталог) Тогда
		Для каждого Каталог Из ДополнительныеКаталогиПоиска Цикл
			КаталогиПоиска.Добавить(ОбъединитьПути(Каталог, ВложенныйКаталог));
		КонецЦикла;
	КонецЕсли;

	УстановитьНаправлениеСортировки(НастройкиПровайдера.НаправлениеСортировки);

КонецПроцедуры

#КонецОбласти

#Область Чтение_вложенных_файлов

Процедура ОбработатьПараметрыРекурсивно(Источник, Знач ИмяФайлаПараметров)
	
	ПрефиксПараметрФайл = ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек;
	
	ПутьКаталогаФайла = Новый Файл(ИмяФайлаПараметров).Путь;

	КлючиКДополнительномуЧтению = Новый Массив;

	Для каждого КлючЗначение Из Источник Цикл
		
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;

		Если ТипЗнч(Значение) = Тип("Соответствие") Тогда

			ОбработатьПараметрыРекурсивно(Значение, ИмяФайлаПараметров);

		Иначе
			Лог.Отладка("Ищю ключ чтения файла: <%1>", Ключ);
			Если СтрНачинаетсяС( ВРег(Ключ), ВРег(ПрефиксПараметрФайл)) Тогда
				КлючиКДополнительномуЧтению.Добавить(Ключ);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для каждого Ключ Из КлючиКДополнительномуЧтению Цикл
		
		ПутьКФайлу = Источник[Ключ];
		
		ПрочитатьФайлИзЗначенияПараметра(Ключ, ПутьКФайлу, ПутьКаталогаФайла, Источник);
		
		Источник.Удалить(Ключ);

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьФайлИзЗначенияПараметра(Знач Ключ, Знач ПутьКФайлу, Знач ПутьКаталогаФайла, Приемник)

	Лог.Отладка("Нашли ключ файла <%1>, значение <%2>, путь каталога-родителя <%3>", 
			Ключ,
			ПутьКФайлу,
			ПутьКаталогаФайла);

	ПутьФайла = ОбъединитьПути(ПутьКаталогаФайла, ПутьКФайлу);
	Параметры = ВыполнитьЧтениеПровайдера(ПутьФайла);

	ОбработатьПараметрыРекурсивно(Параметры, ПутьКаталогаФайла);
		
	Для каждого КлючЗначение Из Параметры Цикл
		
		Ключ = КлючЗначение.Ключ;
		Значение = КлючЗначение.Значение;
	
		Приемник.Вставить(Ключ, Значение);

	КонецЦикла;

КонецПроцедуры // ПрочитатьФайлИзЗначенияПараметра( Ключ, Значение, ПутьКаталогаФайла, Приемник)

Процедура ОбработатьШаблонныеПодстановки(Параметры)

	РегулярноеВыражение = Новый РегулярноеВыражение( "%([^%]*)%" );

	КоличествоПопыток = 5;

	Для Счетчик = 1 По КоличествоПопыток Цикл

		МассивПодстановок = Новый Массив;

		НайтиШаблонныеПодстановки(Параметры, МассивПодстановок, РегулярноеВыражение);

		Если НЕ ЗначениеЗаполнено(МассивПодстановок) Тогда
			Прервать;
		КонецЕсли;

		ВыполнитьПодстановки(МассивПодстановок);

	КонецЦикла;

КонецПроцедуры

Процедура НайтиШаблонныеПодстановки(Параметры, Знач МассивПодстановок, Знач РегулярноеВыражение)

	Для каждого КлючЗначение Из Параметры Цикл
		Значение = КлючЗначение.Значение;
		Тип = ТипЗнч(Значение);
		Если Тип = Тип("Строка") Тогда
			КоллекцияСовпадений = РегулярноеВыражение.НайтиСовпадения( Значение );
			Если КоллекцияСовпадений.Количество() > 0 Тогда
				Описание = Новый Структура("Ключ, Параметры", КлючЗначение.Ключ, Параметры);
				Описание.Вставить("КоллекцияСовпадений", КоллекцияСовпадений);
				МассивПодстановок.Добавить(Описание);

				Лог.Отладка("Нашли значение для подстановки <%1>", Значение);
			КонецЕсли;

		ИначеЕсли Тип = Тип("Соответствие") Тогда
			НайтиШаблонныеПодстановки(Значение, МассивПодстановок, РегулярноеВыражение);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьПодстановки(МассивПодстановок)

	Для каждого ОписаниеПодстановки Из МассивПодстановок Цикл
		КлючПодстановки = ОписаниеПодстановки.Ключ;

		КоллекцияСовпадений = ОписаниеПодстановки.КоллекцияСовпадений;
		Для каждого Совпадение Из КоллекцияСовпадений Цикл
			Значение = Совпадение.Значение;
			ИмяКлюча = Совпадение.Группы[1].Значение;
			Лог.Отладка("Нашли имя ключа <%1> для возможной подстановки в <%2>", ИмяКлюча, Значение);

			ЗначениеПоКлючу = ПолучитьЗначениеКлюча(ИмяКлюча);
			Если ЗначениеПоКлючу <> Неопределено Тогда

				Параметры = ОписаниеПодстановки.Параметры;
				ЗначениеИзПараметров = Параметры[КлючПодстановки];
				ИтоговоеЗначение = СтрЗаменить(ЗначениеИзПараметров, Значение, ЗначениеПоКлючу); 

				Параметры.Вставить(КлючПодстановки, ИтоговоеЗначение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЗначениеКлюча(ИмяКлюча)

	МассивКлючей = СтрРазделить(ИмяКлюча, ".", Ложь);

	ЗначениеКлюча = Неопределено;

	ПервыйПроход = Истина;

	Для каждого Ключ Из МассивКлючей Цикл

		Если ПервыйПроход Тогда
			ЗначениеКлюча = РезультатЧтения[Ключ];
			ПервыйПроход = Ложь;
		Иначе
			ЗначениеКлюча = ЗначениеКлюча[Ключ];
		КонецЕсли;
		
	КонецЦикла;

	Возврат ЗначениеКлюча;

КонецФункции

#КонецОбласти

Процедура ПриСозданииОбъекта(Знач ВходящийКлассПровайдера)

	ПрефиксКлючаДляЧтенияВложенногоФайлаНастроек = "ReadFile";

	РасширенияФайлаПараметров = Новый Массив;
	НаименованияФайлаПараметров = Новый Массив;
	КаталогиПоиска = Новый Массив;

	ИнтерфейсФайловогоПровайдера = Новый ИнтерфейсОбъекта;
	ИнтерфейсФайловогоПровайдера.Ф("РасширенияФайлов");

	РефлекторОбъекта = Новый РефлекторОбъекта(ВходящийКлассПровайдера);

	ПроверкаПровайдера = РефлекторОбъекта.РеализуетИнтерфейс(ИнтерфейсФайловогоПровайдера);

	Если НЕ ПроверкаПровайдера Тогда
		// TODO: Добавить описание того что реализовано, а что нет
		ВызватьИсключение "Не реализован необходимый интерфейс провайдера";
	КонецЕсли;

	КлассПровайдера = ВходящийКлассПровайдера;

	ЧитатьТолькоОдинФайл = Истина;

	НаправлениеСортировки = "ВОЗР";

	РасширенияФайлаПараметров = КлассПровайдера.РасширенияФайлов();

	Если ТипЗнч(РасширенияФайлаПараметров) = Тип("Строка") Тогда
		РасширенияФайлаПараметров = СтрРазделить(РасширенияФайлаПараметров, " ", Ложь);
	КонецЕсли;

КонецПроцедуры

Лог = Логирование.ПолучитьЛог("oscript.lib.configor.file_provider");